// Generated by CoffeeScript 1.7.1
var geoError, geoOptions, geoSuccess, getDirections, model, selectSpot, socket;

geoSuccess = function(current_location) {
  if (current_location) {
    model.set({
      location: {
        timestamp: current_location.timestamp,
        coords: current_location.coords,
        status: 'found'
      }
    });
    return socket.emit('find-nearest-query', {
      target_class: 'bike-parking',
      limit: 10,
      location: model.get('location')
    });
  }
};

geoError = function() {
  console.warn('Failure acquiring geoLocation data');
  return model.set({
    location: {
      timestamp: (new Date()).getTime() / 1000.0,
      coords: null,
      status: 'error'
    }
  });
};

geoOptions = {
  enableHighAccuracy: true,
  maximumAge: 30000,
  timeout: 27000
};

this.Location = Backbone.Model;

socket = io.connect('http://' + document.domain + ':' + window.location.port + '/live');

socket.on('connect', function() {
  model.set({
    parking_spots: {
      status: 'searching'
    }
  });
  return this.emit('find-nearest-query', {
    target_class: 'bike-parking',
    limit: 10,
    location: model.get('location')
  });
});

socket.on('bike-parking-results', function(results) {
  console.log('bike-parking-results');
  console.dir(results);
  return model.set({
    parking_spots: results,
    selected_spot: results.length > 0 ? results[0].id : null
  });
});

socket.on('directions', function(data) {
  console.log('directions');
  console.dir(data);
  return model.set({
    directions: data
  });
});

this.model = model = new Backbone.Model({
  location: {
    status: 'none'
  },
  parking_spots: {
    status: 'none'
  },
  selected_spot: null,
  directions: {
    status: 'none'
  }
});

$(function() {
  var _ref;
  model.set({
    location: {
      status: 'waiting'
    }
  });
  return typeof navigator !== "undefined" && navigator !== null ? (_ref = navigator.geolocation) != null ? _ref.getCurrentPosition(geoSuccess, geoError, geoOptions) : void 0 : void 0;
});

getDirections = function(model) {
  var current_location, parking_spot, parking_spots, selected_spot;
  parking_spots = model.get('parking_spots');
  current_location = model.get('location');
  selected_spot = model.get('selected_spot');
  if (selected_spot && (parking_spots != null ? parking_spots.status : void 0) === 'ok' && (current_location != null ? current_location.status : void 0) === 'found') {
    parking_spot = _.find(parking_spots.locations, {
      id: selected_spot
    });
    model.set({
      directions: {
        status: 'waiting'
      }
    });
    return socket.emit('get-directions', {
      origin: {
        latitude: current_location.coords.latitude,
        longitude: current_location.coords.longitude
      },
      destination: {
        latitude: parking_spot.coord_latitude,
        longitude: parking_spot.coord_longitude
      },
      travel_mode: 'bicycling'
    });
  } else {
    return console.warn("We don't yet have results from our bike-parking query.");
  }
};

selectSpot = function(model, spot) {
  if (model.get('selected_spot') !== spot.id) {
    model.set({
      selected_spot: spot.id
    });
    return getDirections(model);
  }
};

this.socket = socket;
